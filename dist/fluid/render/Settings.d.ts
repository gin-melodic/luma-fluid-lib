import { XUniformDataType } from "../models/XUniform.ts";
export interface IFluidSettings {
    powerOf2Fluid: boolean;
    simulationScale: number;
    fluidScale: number;
    fluidIterations: number;
    gamma: number;
    gradientBackground: number;
    bevelCurveRadius: number;
    innerDarkening: number;
    chromaticAberration: number;
    refraction: number;
    backgroundMultiplier: number;
    periodicBoundary: boolean;
    dragSpeed: number;
    dragCoefficient: number;
    motionDecayFactor: number;
    surfaceDecayFactor: number;
    timestepMultiplier: number;
    fluidPhysicsScale: number;
    paused: boolean;
    version: number;
}
export declare class FluidSetting implements IFluidSettings {
    private _powerOf2Fluid;
    private _simulationScale;
    private _fluidScale;
    private _fluidIterations;
    private _gamma;
    private _gradientBackground;
    private _bevelCurveRadius;
    private _innerDarkening;
    private _chromaticAberration;
    private _refraction;
    private _backgroundMultiplier;
    private _periodicBoundary;
    private _dragSpeed;
    private _dragCoefficient;
    private _motionDecayFactor;
    private _surfaceDecayFactor;
    private _timestepMultiplier;
    private _fluidPhysicsScale;
    private _paused;
    private _version;
    get version(): number;
    set version(value: number);
    get paused(): boolean;
    set paused(value: boolean);
    get fluidPhysicsScale(): number;
    set fluidPhysicsScale(value: number);
    get timestepMultiplier(): number;
    set timestepMultiplier(value: number);
    get surfaceDecayFactor(): number;
    set surfaceDecayFactor(value: number);
    get motionDecayFactor(): number;
    set motionDecayFactor(value: number);
    get dragCoefficient(): number;
    set dragCoefficient(value: number);
    get dragSpeed(): number;
    set dragSpeed(value: number);
    get periodicBoundary(): boolean;
    set periodicBoundary(value: boolean);
    get backgroundMultiplier(): number;
    set backgroundMultiplier(value: number);
    get refraction(): number;
    set refraction(value: number);
    get chromaticAberration(): number;
    set chromaticAberration(value: number);
    get innerDarkening(): number;
    set innerDarkening(value: number);
    get bevelCurveRadius(): number;
    set bevelCurveRadius(value: number);
    get gradientBackground(): number;
    set gradientBackground(value: number);
    get gamma(): number;
    set gamma(value: number);
    get fluidIterations(): number;
    set fluidIterations(value: number);
    get fluidScale(): number;
    set fluidScale(value: number);
    get simulationScale(): number;
    set simulationScale(value: number);
    get powerOf2Fluid(): boolean;
    set powerOf2Fluid(value: boolean);
    onChangeVersion?: () => void;
    onChangePaused?: () => void;
    onChangeTimestepMultiplier?: () => void;
    onChangeFluidPhysicsScale?: (a: number) => void;
    onChangeSurfaceDecayFactor?: (a: XUniformDataType) => void;
    onChangeMotionDecayFactor?: (a: XUniformDataType) => void;
    onChangeDragCoefficient?: (a: XUniformDataType) => void;
    onChangeDragSpeed?: (a: XUniformDataType) => void;
    onChangePeriodicBoundary?: (a: boolean) => void;
    onChangeBackgroundMultiplier?: (a: XUniformDataType) => void;
    onChangeFluidIterations?: (a: number) => void;
    onChangeGamma?: (a: number) => void;
    onChangeRefraction?: (a: number) => void;
    onChangeChromaticAberration?: (a: number) => void;
    onChangeInnerDarkening?: (a: number) => void;
    onChangeBevelCurveRadius?: () => void;
    onChangeGradientBackground?: (a: number) => void;
    onChangeFluidScale?: (_a: number) => void;
    onChangeSimulationScale?: (_a: number) => void;
    onChangePowerOf2Fluid?: (_a: boolean) => void;
    static parse(settings: IFluidSettings): FluidSetting;
}
