export declare const FRAGMENT_SHADER_INIT = "#define STANDARD\n#ifdef PHYSICAL\n    #define IOR\n    #define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n    uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n    uniform float specularIntensity;\n    uniform vec3 specularColor;\n    #ifdef USE_SPECULAR_COLORMAP\n        uniform sampler2D specularColorMap;\n    #endif\n    #ifdef USE_SPECULAR_INTENSITYMAP\n        uniform sampler2D specularIntensityMap;\n    #endif\n#endif\n#ifdef USE_CLEARCOAT\n    uniform float clearcoat;\n    uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n    uniform float iridescence;\n    uniform float iridescenceIOR;\n    uniform float iridescenceThicknessMinimum;\n    uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n    uniform vec3 sheenColor;\n    uniform float sheenRoughness;\n    #ifdef USE_SHEEN_COLORMAP\n        uniform sampler2D sheenColorMap;\n    #endif\n    #ifdef USE_SHEEN_ROUGHNESSMAP\n        uniform sampler2D sheenRoughnessMap;\n    #endif\n#endif\n#ifdef USE_ANISOTROPY\n    uniform vec2 anisotropyVector;\n    #ifdef USE_ANISOTROPYMAP\n        uniform sampler2D anisotropyMap;\n    #endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n\nuniform sampler2D sceneMap;\nuniform sampler2D blurMap;\nuniform bool sceneMapGammaDecode;\nuniform vec2 viewportResolution;\nuniform vec2 blurEdges;\nuniform vec4 uiMetalRoughIridescenceIOR;\n\nvoid main() {\n    vec2 screenUv = gl_FragCoord.xy / viewportResolution;\n    \n    vec4 sampledDiffuseColor = texture2D( sceneMap, screenUv );\n    vec4 sampledBlurColor = texture2D( blurMap, screenUv );\n    #if defined( USE_MAP )\n    vec4 sampledUiColor = texture2D( map, vMapUv );\n    #endif\n    \n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    \n    // include <map_fragment> {\n    #ifdef USE_MAP\n    {\n        float vUvRadius = length(vUv);\n        float blurRegionAlpha = smoothstep(blurEdges.x, blurEdges.y, vUvRadius);\n        sampledDiffuseColor.rgb = mix(\n            sampledDiffuseColor.rgb,\n            sampledBlurColor.rgb,\n            blurRegionAlpha\n        ) * smoothstep(1.0, 0.4, vUvRadius * 0.9); // vignette\n        \n        // convert to linear space\n        if (sceneMapGammaDecode) {\n            sampledDiffuseColor.rgb = pow(sampledDiffuseColor.rgb, vec3(2.2));\n    }\n        \n        // blend in ui layer\n        #if defined( USE_MAP )\n        sampledDiffuseColor.rgb = mix(sampledDiffuseColor.rgb, sampledUiColor.rgb * sampledUiColor.a, sampledUiColor.a);\n        #endif\n        \n        diffuseColor *= sampledDiffuseColor;\n}\n    #endif\n    // }\n    \n    // include <color_fragment> {\n    #if defined( USE_COLOR_ALPHA )\n        diffuseColor *= vColor;\n    #elif defined( USE_COLOR )\n        diffuseColor.rgb *= vColor;\n    #endif\n    // }\n    \n    // include <roughnessmap_fragment> {\n    float roughnessFactor = roughness;\n    #ifdef USE_ROUGHNESSMAP\n        vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n        // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n        roughnessFactor *= texelRoughness.g;\n    #endif\n    // }\n    \n    // include <metalnessmap_fragment> {\n    float metalnessFactor = metalness;\n    #ifdef USE_METALNESSMAP\n        vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n        // reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n        metalnessFactor *= texelMetalness.b;\n    #endif\n    // }\n    \n    #if defined( USE_MAP )\n    metalnessFactor = mix(metalnessFactor, uiMetalRoughIridescenceIOR.x, sampledUiColor.a);\n    roughnessFactor = mix(roughnessFactor, uiMetalRoughIridescenceIOR.y, sampledUiColor.a);\n    #endif\n    \n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <clearcoat_normal_fragment_begin>\n    #include <clearcoat_normal_fragment_maps>\n    #include <emissivemap_fragment>\n    #include <lights_physical_fragment>\n    \n    #if defined( USE_MAP ) && defined( USE_IRIDESCENCE )\n    material.iridescence = mix(material.iridescence, uiMetalRoughIridescenceIOR.z, sampledUiColor.a);\n    material.iridescenceIOR = mix(material.iridescenceIOR, uiMetalRoughIridescenceIOR.w, sampledUiColor.a);\n    material.clearcoat = mix(material.clearcoat, 0.0, sampledUiColor.a);\n    #endif\n    \n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n    vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n    \n    vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n    \n    #ifdef USE_SHEEN\n        float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n        outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n    #endif\n    \n    #ifdef USE_CLEARCOAT\n        float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n        vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n        outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n    #endif\n    \n    // include <opaque_fragment> {\n    #ifdef OPAQUE\n        diffuseColor.a = 1.0;\n    #endif\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    // }\n    \n    // blend in ui layer, out of PBR\n    // #if defined( USE_MAP )\n    // gl_FragColor.rgb = mix(gl_FragColor.rgb, sampledUiColor.rgb, sampledUiColor.a);\n    // #endif\n    \n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}";
